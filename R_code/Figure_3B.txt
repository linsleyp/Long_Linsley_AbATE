#### from here
rm(list = ls())

library(ggplot2); library(reshape2)
library(gtable)
library(grid)
library(plyr)
theme_set(theme_bw(26) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.key = element_blank()))
update_geom_defaults("point", aes(size = 4))
update_geom_defaults("line", aes(size = 3))
cbPalette = c("#009E73","#D55E00","#0072B2")

## working directory assumed to be inside a GitHub folder on Mac Desktop
setwd("~/Desktop/GitHub/data_files/DN_DH_bulk/")

## load normalized counts
counts.tmm <- read.delim("TMM_P54_6_9_11_13_15_bulk_combined_counts_outliers_removed_collapsed.txt")
counts = counts.tmm
counts.keep = counts

## load modulesd

tfs.800 <- read.delim("top_800_RNAseq_TF_antigen_correlated_genes.gmx")
eomes.300 = as.character(tfs.800[1:300,"EOMES"])
 
mod = as.data.frame(eomes.300)

### load combined anno

anno.full <- read.delim("P54_6_9_11_13_15_combined_anno.txt")

anno = subset(anno.full, !project == "P54_15") ## examine only Responders
pvr = ifelse(anno$Stimulation %in% grep("PVR", anno$Stimulation, value = T), 1, 0)
anno = data.frame(anno, pvr)

anno.p54.6.9 = subset(anno, project == "P54-6_9")
anno.p54.11 = subset(anno, project == "P54_11")
anno.p54.13 = subset(anno, project == "P54_13")
anno.p54.15 = subset(anno, project == "P54_15")

tigit.neg = subset(anno, anno$CellType %in% grep("TIGIT-", anno$CellType, value = T))
tigit.pos = subset(anno, anno$CellType %in% grep("TIGIT\\+", anno$CellType, value = T))

pvr.pos = subset(anno, anno$Stimulation %in% grep("PVR-", anno$Stimulation, value = T))
pvr.neg = subset(anno, !anno$Stimulation %in% grep("PVR-", anno$Stimulation, value = T))

#### subset

a.set = subset(anno, !anno$libID %in% pvr.pos$libID & !anno$Stimulation == "none")

a1 = subset(a.set, project == "P54-6_9")
a2 = subset(a.set, project == "P54_11")
a3 = subset(a.set, project == "P54_13")

a1.pos = subset(a1, libID %in% tigit.pos$libID)
a1.neg = subset(a1, libID %in% tigit.neg$libID)
a2.pos = subset(a2, libID %in% tigit.pos$libID)
a2.neg = subset(a2, libID %in% tigit.neg$libID)
a3.pos = subset(a3, libID %in% tigit.pos$libID)
a3.neg = subset(a3, libID %in% tigit.neg$libID)

a1.pos.pvr = subset(a1, a1$libID %in% pvr.pos$libID)
a2.pos.pvr = subset(a2, a2$libID %in% pvr.pos$libID)
a3.pos.pvr = subset(a3, a3$libID %in% pvr.pos$libID)
a1.neg.pvr = subset(a1, a1$libID %in% pvr.neg$libID)
a2.neg.pvr = subset(a2, a2$libID %in% pvr.neg$libID)
a3.neg.pvr = subset(a3, a3$libID %in% pvr.neg$libID)

counts.a1.pos = subset(counts.keep, select = colnames(counts.keep) %in% a1.pos$libID)
counts.a1.neg = subset(counts.keep, select = colnames(counts.keep) %in% a1.neg$libID)
counts.a2.pos = subset(counts.keep, select = colnames(counts.keep) %in% a2.pos$libID)
counts.a2.neg = subset(counts.keep, select = colnames(counts.keep) %in% a2.neg$libID)
counts.a3.pos = subset(counts.keep, select = colnames(counts.keep) %in% a3.pos$libID)
counts.a3.neg = subset(counts.keep, select = colnames(counts.keep) %in% a3.neg$libID)

counts.a1.pos.pvr = subset(counts.keep, select = colnames(counts.keep) %in% a1.pos.pvr$libID)
counts.a2.pos.pvr = subset(counts.keep, select = colnames(counts.keep) %in% a2.pos.pvr$libID)
counts.a3.pos.pvr = subset(counts.keep, select = colnames(counts.keep) %in% a3.pos.pvr$libID)
counts.a1.neg.pvr = subset(counts.keep, select = colnames(counts.keep) %in% a1.neg.pvr$libID)
counts.a2.neg.pvr = subset(counts.keep, select = colnames(counts.keep) %in% a2.neg.pvr$libID)
counts.a3.neg.pvr = subset(counts.keep, select = colnames(counts.keep) %in% a3.neg.pvr$libID)

##### differential expression calculations using ecdfs

a = c("a2.pos")
b = c("a2.neg")

var.a = get(paste("counts",a, sep = "."))
var.b = get(paste("counts",b, sep = "."))

var.a.sub = subset(var.a, row.names(var.a) %in% mod[,1])
var.b.sub = subset(var.b, row.names(var.b) %in% mod[,1])

m.a = melt(var.a.sub)
m.a$set = a

m.b = melt(var.b.sub)
m.b$set = b

m1 = rbind(m.a, m.b)
m1$set = gsub(a, "DH", m1$set)
m1$set = gsub(b, "DL", m1$set)

set = unique(m1$set)
ncy = length(set)

DF = data.frame(x = as.numeric(), y = as.numeric(), set = as.character())

#for(i in 1:ncx){

#q = names[i]
#qsub = subset(m1, symbol == q)
qsub = m1
#zcol1 = unique(qsub$col)

	#for(j in 1:ncy){
		r = set[j]
			for(j in 1:ncy){
				r = set[j]
				rsub = subset(qsub, set == r)
				z = as.data.frame(Ecdf(log2(rsub$value+1)))
				z = data.frame(z, set = r)

				DF2 = rbind(DF, z)
				DF = DF2
				}
		#
		dev.off()
		quartz(height =5, width =7, dpi =72)
		ggplot(DF2, aes(x = x, y = y, group = set, colour = set)) + geom_line() 
		last_plot() + scale_x_continuous(breaks = c(0, 5,10))
		last_plot() + scale_y_continuous(breaks = c(0, 0.5, 1.0))
		last_plot() + labs (x = "Expression level, \nlog2(RPM+1)", y = "Cumulative distribution")
		last_plot() + scale_fill_manual(values=cbPalette)

ks.test(m.a$value, m.b$value)